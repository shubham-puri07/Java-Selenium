When automating Gmail access while keeping **Safe Browsing** and **Two-Factor Authentication (2FA)** enabled, you'll face restrictions due to Google's security policies. 
However, there are secure ways to access Gmail programmatically without disabling these protections.

Here are a few approaches:

### 1. **Gmail API (Preferred Method)**
   - **What it is**: The Gmail API is a secure way to access Gmail programmatically. It allows you to read, send, delete, and manage your emails.
   - **How to use**:
     1. Enable **Gmail API** from [Google Cloud Console](https://console.developers.google.com/).
     2. Create **OAuth 2.0 credentials**.
     3. Use **OAuth 2.0** to authenticate the app. This will handle two-factor authentication and ensure secure access.
     4. Use the API to retrieve the inbox messages.

   - **Advantages**: 
     - Does not require turning off 2FA or Safe Browsing.
     - Follows Google's best practices and security policies.
   - **Example Libraries**: 
     - Python: `google-api-python-client`
     - Java: `google-api-java-client`

   - **Sample Code (Python)**:
     ```python
     from google.oauth2.credentials import Credentials
     from googleapiclient.discovery import build

     SCOPES = ['https://www.googleapis.com/auth/gmail.readonly']

     # Load credentials.json or authenticate using OAuth flow
     creds = Credentials.from_authorized_user_file('credentials.json', SCOPES)
     service = build('gmail', 'v1', credentials=creds)

     # Access messages
     results = service.users().messages().list(userId='me', labelIds=['INBOX']).execute()
     messages = results.get('messages', [])
     for message in messages:
         msg = service.users().messages().get(userId='me', id=message['id']).execute()
         print(msg['snippet'])
     ```

### 2. **IMAP Access with OAuth 2.0**
   - **What it is**: IMAP is another protocol that allows you to fetch emails from your Gmail account.
   - **How to use**:
     1. Enable **Gmail API** and create **OAuth credentials**.
     2. Authenticate using OAuth 2.0, which works with 2FA.
     3. Use the IMAP protocol to access emails.
   
   - **Advantages**: 
     - Supports 2FA and Safe Browsing.
     - Works without bypassing security features.
   
   - **Example Libraries**: 
     - Python: `imaplib`
   
   - **Sample Code (Python)**:
     ```python
     import imaplib
     import oauth2client
     from google.oauth2.credentials import Credentials

     # Authenticate via OAuth2 using credentials.json
     creds = Credentials.from_authorized_user_file('credentials.json')
     access_token = creds.token

     # Connect to Gmail's IMAP server
     imap_server = imaplib.IMAP4_SSL("imap.gmail.com")
     imap_server.authenticate("XOAUTH2", lambda x: f"user={creds.client_id}\1auth=Bearer {access_token}\1\1")

     # Access inbox and read emails
     imap_server.select("inbox")
     typ, data = imap_server.search(None, "ALL")
     for num in data[0].split():
         typ, msg_data = imap_server.fetch(num, '(RFC822)')
         print(msg_data[0][1])
     ```

### 3. **Using App Passwords (Only for IMAP/SMTP)**
   - **What it is**: Google provides the option to generate **App Passwords** if 2FA is enabled. App passwords are used to bypass 2FA for less secure apps like IMAP or SMTP access.
   - **How to use**:
     1. Go to your Google Account settings.
     2. Under **Security**, find **App Passwords** and generate one.
     3. Use this app password in combination with IMAP/SMTP to access Gmail.

   - **Advantages**: 
     - Easier than implementing OAuth.
     - 2FA remains active for normal login.
   - **Disadvantages**:
     - Considered less secure than OAuth.
     - Only works for IMAP/SMTP.
   
   - **Sample Code (Python)**:
     ```python
     import imaplib

     imap_server = imaplib.IMAP4_SSL('imap.gmail.com')
     imap_server.login('your-email@gmail.com', 'your-app-password')
     
     # Select the inbox and fetch emails
     imap_server.select('inbox')
     typ, data = imap_server.search(None, 'ALL')
     for num in data[0].split():
         typ, msg_data = imap_server.fetch(num, '(RFC822)')
         print(msg_data[0][1])
     ```

### Recommendations:
- **Gmail API** is the most secure and recommended approach since it uses OAuth 2.0, is fully supported by Google, and integrates seamlessly with 2FA and Safe Browsing.
- **IMAP with OAuth** is a solid alternative if you're familiar with the IMAP protocol and need access to email content.
- **App Passwords** are simpler but less secure, so avoid them unless necessary.

These methods ensure you can access Gmail without turning off Safe Browsing or 2FA, while complying with Google's security policies.